bool compareBySpinCount(const string &in a, const string &in b)
{
    int countA = spinCounts.exists(a) ? int(spinCounts[a]) : 0;
    int countB = spinCounts.exists(b) ? int(spinCounts[b]) : 0;
    return countA > countB;
}
string trim(const string&in str)
{
string result = str;
while (result.length() > 0 && (string_left(result, 1) == " " || string_left(result, 1) == "\n" || string_left(result, 1) == "\r"))
{
result = string_trim_left(result, 1);
}
while (result.length() > 0 && (string_right(result, 1) == " " || string_right(result, 1) == "\n" || string_right(result, 1) == "\r"))
{
result = string_trim_right(result, 1);
}
return result;
}
void setupmenu(bool music_added = true)
{
if (music_added)
{
m.add_music("menumus.ogg");
} else
{
m.add_music("");
}
m.reset();
m.automatic_intro = true;
m.focus_first_item = false;
m.wrap = true;
m.click_sound = "sounds/menuclick.ogg";
m.close_sound = "sounds/menuclose.ogg";
m.edge_sound = "sounds/menuedge.ogg";
m.enter_sound = "sounds/menuenter.ogg";
m.open_sound = "sounds/menuopen.ogg";
m.wrap_sound = "sounds/menuwrap.ogg";
}
void export_wheels()
{
    file f;
    if (!f.open("data/exported/wheels.txt", "wb"))
    {
        alert("Error", "Failed to open file for writing.");
wheelspin();
    }
    array<string>@ keys = wheels.get_keys();
keys.sort_ascending();
    for (uint i = 0; i < keys.length(); i++)
    {
        string name = keys[i];
        array<string>@ options = string_split(string(wheels[name]), ",", true);
        for (uint j = 0; j < options.length(); j++)
        {
            options[j] = trim(options[j]);
        }
        string joined = join(options, ", ");
        f.write(name + "=" + joined + "\r\n");
    }
    f.close();
    alert("Success", "Wheels exported to data/exported/wheels.txt");
wheelspin();
}
void export_selected_wheels()
{
    array<string>@ keys = wheels.get_keys();
keys.sort_ascending();
    if (keys.length() == 0)
    {
        alert("Error", "No wheels to export.");
        wheelspin();
    }
    form.reset();
    form.create_window("Export Selected Wheels", false);
    int wheelList = form.create_list("Select wheels to export:", keys.length(), true);
    for (uint i = 0; i < keys.length(); i++)
    {
        form.add_list_item(wheelList, keys[i], keys[i]);
    }
    int exportButton = form.create_button("&Export");
    int cancelButton = form.create_button("&Cancel");
    form.focus(wheelList);
    while (true)
    {
        wait(5);
        form.monitor();
        if (form.is_pressed(exportButton))
        {
            int[]@ checkedIndices = form.get_checked_list_items(wheelList);
            if (checkedIndices.length() == 0)
            {
                alert("Nothing selected", "You must select at least one wheel.");
wheelspin();
            }
            file f;
            if (!f.open("data/exported/wheels.txt", "wb"))
            {
                alert("Error", "Failed to open file for writing.");
                wheelspin();
            }
            for (uint i = 0; i < checkedIndices.length(); i++)
            {
                int index = checkedIndices[i];
                string name = form.get_list_item_id(wheelList, index);
                array<string>@ options = string_split(string(wheels[name]), ",", true);
                for (uint j = 0; j < options.length(); j++)
                {
                    options[j] = trim(options[j]);
                }
                string joined = join(options, ", ");
                f.write(name + "=" + joined + "\r\n");
            }
            f.close();
            alert("Success", "Selected wheels exported to data/exported/wheels.txt");
            wheelspin();
        }
        if (form.is_pressed(cancelButton) || key_pressed(KEY_ESCAPE))
        {
            wheelspin();
        }
    }
}
void import_wheels()
{
    if (!file_exists("data/exported/wheels.txt"))
    {
        alert("Error", "No wheels.txt file found.");
        wheelspin();
    }
    file f;
    if (!f.open("data/exported/wheels.txt", "rb"))
    {
        alert("Error", "Failed to open wheels.txt");
        wheelspin();
    }
    string content = f.read();
    f.close();
    string[] lines = string_split(content, "\r\n", true);
    int imported = 0;
    int skipped = 0;
    for (uint i = 0; i < lines.length(); i++)
    {
        if (lines[i] == "") continue;
        string[] parts = string_split(lines[i], "=", true);
        if (parts.length() < 2)
        {
            alert("Error", "Malformed line " + (i + 1));
            wheelspin();
        }
        string name = trim(parts[0]);
        string rawOptions = parts[1];
        array<string>@ options = string_split(rawOptions, ",", true);
        for (uint j = 0; j < options.length(); j++)
        {
            options[j] = trim(options[j]);
        }
        string formatted = join(options, ", ");
        if (!wheels.exists(name))
        {
            wheels[name] = formatted;
            imported++;
        }
        else
        {
            skipped++;
        }
    }
    writedata();
    string msg = "Import complete.\n\n";
    msg += "Wheels imported: " + imported + "\n";
    msg += ", Duplicates skipped: " + skipped;
    alert("Success", msg);
    wheelspin();
}
void import_selected_wheels()
{
    if (!file_exists("data/exported/wheels.txt"))
    {
        alert("Error", "No wheels.txt file found.");
        wheelspin();
    }
    file f;
    if (!f.open("data/exported/wheels.txt", "rb"))
    {
        alert("Error", "Failed to open wheels.txt");
        wheelspin();
    }
    string content = f.read();
    f.close();
    string[] lines = string_split(content, "\r\n", true);
    array<string> importNames;
    importNames.sort_ascending();
    dictionary importData;
    for (uint i = 0; i < lines.length(); i++)
    {
        if (lines[i] == "") continue;
        string[] parts = string_split(lines[i], "=", true);
        if (parts.length() < 2) continue;
        string name = trim(parts[0]);
        string rawOptions = parts[1];
        array<string>@ options = string_split(rawOptions, ",", true);
        for (uint j = 0; j < options.length(); j++)
        {
            options[j] = trim(options[j]);
        }
        string formatted = join(options, ", ");
        importNames.insert_last(name);
        importData[name] = formatted;
    }
    if (importNames.length() == 0)
    {
        alert("No Wheels Imported", "No wheels found in file.");
        wheelspin();
    }
    form.reset();
    form.create_window("Import Selected Wheels", false);
    int implist = form.create_list("Choose wheels to import:", importNames.length(), true);
    for (uint i = 0; i < importNames.length(); i++)
    {
        form.add_list_item(implist, importNames[i], importNames[i]);
    }
    int importBtn = form.create_button("&Import");
    int cancelBtn = form.create_button("&Cancel");
    form.focus(implist);
    while (true)
    {
        wait(5);
        form.monitor();
        if (form.is_pressed(importBtn))
        {
            int[]@ checked = form.get_checked_list_items(implist);
            if (checked.length() == 0)
            {
                alert("Nothing Selected", "You must select at least one wheel.");
                wheelspin();
            }
            int imported = 0;
            int skipped = 0;
            for (uint i = 0; i < checked.length(); i++)
            {
                string name = form.get_list_item_id(implist, checked[i]);
                if (!wheels.exists(name))
                {
                    wheels[name] = string(importData[name]);
                    imported++;
                }
                else
                {
                    skipped++;
                }
            }
            writedata();
            string msg = "Import complete.\n\n";
            msg += "Wheels imported: " + imported + "\n";
            msg += ", Duplicates skipped: " + skipped;
            alert("Success", msg);
            wheelspin();
        }
        if (form.is_pressed(cancelBtn) || key_pressed(KEY_ESCAPE))
        {
            wheelspin();
        }
    }
}
