bool compareSpinCount(const string &in a, const string &in b)
{
    int countA = spinCounts.exists(a) ? int(spinCounts[a]) : 0;
    int countB = spinCounts.exists(b) ? int(spinCounts[b]) : 0;
    return countA > countB;
}
string trim(const string&in str)
{
string result = str;
while (result.length() > 0 && (string_left(result, 1) == " " || string_left(result, 1) == "\n" || string_left(result, 1) == "\r"))
{
result = string_trim_left(result, 1);
}
while (result.length() > 0 && (string_right(result, 1) == " " || string_right(result, 1) == "\n" || string_right(result, 1) == "\r"))
{
result = string_trim_right(result, 1);
}
return result;
}
void setupmenu(bool music_added = true)
{
if (music_added)
{
m.add_music("menumus.ogg");
} else
{
m.add_music("");
}
m.reset();
m.automatic_intro = true;
m.focus_first_item = false;
m.wrap = true;
m.click_sound = "menuclick.ogg";
m.close_sound = "menuclose.ogg";
m.edge_sound = "menuedge.ogg";
m.enter_sound = "menuenter.ogg";
m.open_sound = "menuopen.ogg";
m.wrap_sound = "menuwrap.ogg";
}
void export_wheels()
{
    setupmenu(false);
    m.add_item("Replace file", "replace");
    m.add_item("Append to file", "append");
    m.add_item("Cancel", "cancel");
    m.intro_text = "Do you want to replace the existing file, or append to it?";
    int res = m.run();
    string mode = m.get_item_id(m.get_selected_item());
    if (mode == "cancel") wheelspin();
    string filepath = "data/exported/wheels.txt";
    dictionary existing;
    if (file_exists(filepath) && mode == "append")
    {
        file fcheck;
        if (fcheck.open(filepath, "rb"))
        {
            string[] lines = string_split(fcheck.read(), "\r\n", true);
            for (uint i = 0; i < lines.length(); i++)
            {
                string[] parts = string_split(lines[i], "=", true);
                if (parts.length() >= 2)
                    existing[trim(parts[0])] = true;
            }
            fcheck.close();
        }
    }
    file f;
    if (!f.open(filepath, mode == "append" ? "ab" : "wb"))
    {
        alert("Error", "Failed to open file for writing.");
        wheelspin();
    }
    array<string>@ keys = wheels.get_keys();
    keys.sort_ascending();
    for (uint i = 0; i < keys.length(); i++)
    {
        string name = keys[i];
        if (existing.exists(name)) continue;
        array<string>@ options = string_split(string(wheels[name]), ",", true);
        for (uint j = 0; j < options.length(); j++) options[j] = trim(options[j]);
        f.write(name + "=" + join(options, ", ") + "\r\n");
        f.write(name + "_desc=" + (wheelDescriptions.exists(name) ? string(wheelDescriptions[name]) : "none") + "\r\n");
        bool isLocked = lockedWheels.exists(name);
        f.write(name + "_locked=" + (isLocked ? "true" : "false") + "\r\n");
        int spins = spinCounts.exists(name) ? int(spinCounts[name]) : 0;
        f.write(name + "_spins=" + ("" + spins) + "\r\n");
    }
    f.close();
    alert("Success", "Wheels exported to " + filepath);
    wheelspin();
}
void export_selected_wheels()
{
    array<string>@ keys = wheels.get_keys();
    keys.sort_ascending();
    if (keys.length() == 0)
    {
        alert("Error", "No wheels to export.");
        wheelspin();
    }
    form.reset();
    form.create_window("Export Selected Wheels", false);
    int list = form.create_list("Select wheels to export:", keys.length(), true);
    for (uint i = 0; i < keys.length(); i++)
    {
        form.add_list_item(list, keys[i], keys[i]);
    }
    int exportBtn = form.create_button("&Export", true);
    int cancelBtn = form.create_button("&Cancel");
    form.focus(list);
    while (true)
    {
        wait(5);
        form.monitor();
        if (form.is_pressed(exportBtn))
        {
            int[]@ checked = form.get_checked_list_items(list);
            if (checked.length() == 0)
            {
                alert("Nothing selected", "You must select at least one wheel.");
                wheelspin();
            }
            setupmenu(false);
            m.add_item("Replace file", "replace");
            m.add_item("Append to file", "append");
            m.add_item("Cancel", "cancel");
            m.intro_text = "Do you want to replace the existing file, or append to it?";
            int res = m.run();
            string mode = m.get_item_id(m.get_selected_item());
            if (mode == "cancel") wheelspin();
            string filepath = "data/exported/wheels.txt";
            dictionary existing;
            if (file_exists(filepath) && mode == "append")
            {
                file fcheck;
                if (fcheck.open(filepath, "rb"))
                {
                    string[] lines = string_split(fcheck.read(), "\r\n", true);
                    for (uint i = 0; i < lines.length(); i++)
                    {
                        string[] parts = string_split(lines[i], "=", true);
                        if (parts.length() >= 2)
                            existing[trim(parts[0])] = true;
                    }
                    fcheck.close();
                }
            }
            file f;
            if (!f.open(filepath, mode == "append" ? "ab" : "wb"))
            {
                alert("Error", "Failed to open file for writing.");
                wheelspin();
            }
            for (uint i = 0; i < checked.length(); i++)
            {
                string name = form.get_list_item_id(list, checked[i]);
                if (existing.exists(name)) continue;
                array<string>@ options = string_split(string(wheels[name]), ",", true);
                for (uint j = 0; j < options.length(); j++) options[j] = trim(options[j]);
                f.write(name + "=" + join(options, ", ") + "\r\n");
                f.write(name + "_desc=" + (wheelDescriptions.exists(name) ? string(wheelDescriptions[name]) : "none") + "\r\n");
                bool isLocked = lockedWheels.exists(name);
                f.write(name + "_locked=" + (isLocked ? "true" : "false") + "\r\n");
                int spins = spinCounts.exists(name) ? int(spinCounts[name]) : 0;
                f.write(name + "_spins=" + ("" + spins) + "\r\n");
            }
            f.close();
            alert("Success", "Selected wheels exported to " + filepath);
            wheelspin();
        }
        if (form.is_pressed(cancelBtn) || key_pressed(KEY_ESCAPE))
            wheelspin();
    }
}
void import_wheels()
{
    if (!file_exists("data/exported/wheels.txt"))
{
        alert("Error", "No wheels.txt file found.");
        wheelspin();
    }
    file f;
    if (!f.open("data/exported/wheels.txt", "rb"))
{
        alert("Error", "Failed to open wheels.txt");
        wheelspin();
    }
    string content = f.read();
    f.close();
    string[] lines = string_split(content, "\r\n", true);
    dictionary bufferDesc, bufferLock, bufferSpins;
    int imported = 0, skipped = 0;
    for (uint i = 0; i < lines.length(); i++)
{
        if (lines[i] == "") continue;
        string[] parts = string_split(lines[i], "=", true);
        if (parts.length() < 2) continue;
        string key = trim(parts[0]);
        string value = trim(parts[1]);
        if (string_right(key, 5) == "_desc")
{
            string name = key.substr(0, key.length() - 5);
            bufferDesc[name] = value;
        }
else if (string_right(key, 7) == "_locked")
{
            string name = key.substr(0, key.length() - 7);
            bufferLock[name] = value == "true";
        }
else if (string_right(key, 6) == "_spins")
{
            string name = key.substr(0, key.length() - 6);
            bufferSpins[name] = value;
        }
else {
            string name = key;
            if (wheels.exists(name))
{
                skipped++;
                continue;
            }
            array<string>@ options = string_split(value, ",", true);
            for (uint j = 0; j < options.length(); j++) options[j] = trim(options[j]);
            wheels[name] = join(options, ", ");
            imported++;
        }
    }
    array<string>@ keys = wheels.get_keys();
    for (uint i = 0; i < keys.length(); i++)
{
        string name = keys[i];
        if (bufferDesc.exists(name)) wheelDescriptions[name] = string(bufferDesc[name]);
if (bufferLock.exists(name) && string(bufferLock[name]) == "true")
    lockedWheels[name] = true;
if (bufferSpins.exists(name))
    spinCounts[name] = int(parse_int(string(bufferSpins[name])));
    }
    writedata();
    string msg = "Import complete.\n\nWheels imported: " + imported + "\n, Duplicates skipped: " + skipped;
    alert("Success", msg);
    wheelspin();
}
void import_selected_wheels()
{
    if (!file_exists("data/exported/wheels.txt"))
{
        alert("Error", "No wheels.txt file found.");
        wheelspin();
    }
    file f;
    if (!f.open("data/exported/wheels.txt", "rb"))
{
        alert("Error", "Failed to open wheels.txt");
        wheelspin();
    }
    string content = f.read();
    f.close();
    dictionary importData, bufferDesc, bufferLock, bufferSpins;
    array<string> importNames;
    string[] lines = string_split(content, "\r\n", true);
    for (uint i = 0; i < lines.length(); i++)
{
        if (lines[i] == "") continue;
        string[] parts = string_split(lines[i], "=", true);
        if (parts.length() < 2) continue;
        string key = trim(parts[0]);
        string value = trim(parts[1]);
        if (string_right(key, 5) == "_desc")
{
            bufferDesc[key.substr(0, key.length() - 5)] = value;
        }
else if (string_right(key, 7) == "_locked")
{
            bufferLock[key.substr(0, key.length() - 7)] = value;
        }
else if (string_right(key, 6) == "_spins")
{
            bufferSpins[key.substr(0, key.length() - 6)] = value;
        }
else
{
            importNames.insert_last(key);
            importData[key] = value;
        }
    }
    if (importNames.length() == 0)
{
        alert("No Wheels Imported", "No wheels found in file.");
        wheelspin();
    }
    form.reset();
    form.create_window("Import Selected Wheels", false);
    int list = form.create_list("Choose wheels to import:", importNames.length(), true);
    for (uint i = 0; i < importNames.length(); i++)
        form.add_list_item(list, importNames[i], importNames[i]);
    int importBtn = form.create_button("&Import",true);
    int cancelBtn = form.create_button("&Cancel");
    form.focus(list);
    while (true)
{
        wait(5);
        form.monitor();
        if (form.is_pressed(importBtn))
{
            int[]@ checked = form.get_checked_list_items(list);
            if (checked.length() == 0)
{
                alert("Nothing Selected", "You must select at least one wheel.");
                wheelspin();
            }
            int imported = 0, skipped = 0;
            for (uint i = 0; i < checked.length(); i++)
{
                string name = form.get_list_item_id(list, checked[i]);
                if (wheels.exists(name))
{
                    skipped++;
                    continue;
                }
                array<string>@ options = string_split(string(importData[name]), ",", true);
                for (uint j = 0; j < options.length(); j++) options[j] = trim(options[j]);
                wheels[name] = join(options, ", ");
                if (bufferDesc.exists(name)) wheelDescriptions[name] = string(bufferDesc[name]);
if (bufferLock.exists(name) && string(bufferLock[name]) == "true")
    lockedWheels[name] = true;
if (bufferSpins.exists(name))
    spinCounts[name] = int(parse_int(string(bufferSpins[name])));
                imported++;
            }
            writedata();
            string msg = "Import complete.\n\nWheels imported: " + imported + "\n, Duplicates skipped: " + skipped;
            alert("Success", msg);
            wheelspin();
        }
        if (form.is_pressed(cancelBtn) || key_pressed(KEY_ESCAPE))
            wheelspin();
    }
}

void export_wheel_settings()
{
    file f;
    if (!f.open("data/exported/settings.txt", "wb"))
{
        alert("Error", "Could not create settings.txt");
        wheelspin();
    }
    f.write("spinBaseDelay=" + spinBaseDelay + "\r\n");
    f.write("spinGrowth=" + spinGrowth + "\r\n");
    f.write("spinBaseTicks=" + spinBaseTicks + "\r\n");
    f.write("spinRandomRange=" + spinRandomRange + "\r\n");
    f.write("wheeltype=" + wheeltype + "\r\n");
    f.close();
    alert("Saved", "Settings exported to data/exported/settings.txt");
    wheelspin();
}
void import_wheel_settings()
{
    if (!file_exists("data/exported/settings.txt"))
{
        alert("Error", "No settings.txt file found.");
        wheelspin();
    }
    file f;
    if (!f.open("data/exported/settings.txt", "rb"))
{
        alert("Error", "Failed to open settings.txt");
        wheelspin();
    }
    string content = f.read();
    f.close();
    string[] lines = string_split(content, "\r\n", true);
    for (uint i = 0; i < lines.length(); i++)
{
        if (lines[i] == "") continue;
        string[] parts = string_split(lines[i], "=", true);
        if (parts.length() < 2) continue;
        string key = trim(parts[0]);
        string value = trim(parts[1]);
        if (key == "spinBaseDelay") spinBaseDelay = parse_int(value);
        else if (key == "spinGrowth") spinGrowth = parse_int(value);
        else if (key == "spinBaseTicks") spinBaseTicks = parse_int(value);
        else if (key == "spinRandomRange") spinRandomRange = parse_int(value);
        else if (key == "wheeltype") wheeltype = value;
    }
    writepreffs();
    alert("Loaded", "Settings imported from settings.txt");
    wheelspin();
}
void update_recent_wheels(const string &in name)
{
    int index = recentWheels.find(name);
    if (index != -1) recentWheels.remove_at(index);
    recentWheels.insert_at(0, name);
    if (recentWheels.length() > 5) recentWheels.resize(5);
}

