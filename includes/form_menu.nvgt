/* menu.nvgt - create simple menus based on an internal audio form
 * This also contains helper menus which can be used both as examples of the classes usage as well as to aid in game development, such as a learn game sounds menu.
 *
 * NVGT - NonVisual Gaming Toolkit
 * Copyright (c) 2022-2024 Sam Tupy
 * https://nvgt.gg
 * This software is provided "as-is", without any express or implied warranty. In no event will the authors be held liable for any damages arising from the use of this software.
 * Permission is granted to anyone to use this software for any purpose, including commercial applications, and to alter it and redistribute it freely, subject to the following restrictions:
 * 1. The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required.
 * 2. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.
 * 3. This notice may not be removed or altered from any source distribution.
*/

#include "form.nvgt"

int menumusvolume=0;
void fade(sound@ handle, double final_volume = -50, double delay = 25)
{
if (handle.volume == final_volume or !handle.active)
return;
while(round(handle.volume, 0) != round(final_volume, 0) and handle.playing) {
if (handle.volume > final_volume)
handle.volume = handle.volume - 1;
else if (handle.volume < final_volume)
handle.volume = handle.volume + 1;
else
break;
wait (delay);
}
}

class menu {
	funcdef void menu_callback(menu@, string);
	audio_form form; // Only access if really needed.
	// All properties from this point can be freely set while using this class.
bool music_added = false;
	string intro_text; // Spoken when the void intro() function is called.
	string click_sound; // Played when the user changes positions in the menu.
	string enter_sound; // Played when the user chooses an option in the menu.
	string edge_sound; // Plays when the user attempts moving beyond the border of a menu while wrapping is disabled.
	string wrap_sound; // Played when the menu wraps (only happens when bool wrap = true).
	string open_sound; // Played when the void intro() function is called.
	string close_sound; // Played when the user escapes out of the menu.
int voltime = 50;
int volkeyup = KEY_PRIOR;
int volkeydown = KEY_NEXT;
timer voltimer;
sound music;
	menu_callback@ background_callback = null; // A function called every time the monitor() method of this class is called.
	string background_callback_data;
	bool wrap = false; // If the user moves beyond an edge of the menu, set this to true to jump them to the other edge, or false to play an edge sound and repeat the last item.
	uint wrap_delay = 10; // How much time should the menu block when wrapping.
	bool focus_first_item = false; // If this is false, the user will be required to press an arrow key to focus either the first or last item of the menu after the intro function has been called. Otherwise they will be focused on the first item.
	bool automatic_intro = true; // If this is true, the intro function will be automatically called the first time the monitor method is invoqued, then the variable will be set to false. It can be set to true again at any time to cause the intro sequence to repeat, or the intro function can be called manually.
	pack@ pack_file; // Optionally set this to a pack containing sounds.
	menu() {
		reset();
	}
	// The following function resets the menu to it's default state. If reset_settings is true, the sounds which have been set and other such options are cleared.
	void reset(bool reset_settings = false) {
		form.reset();
		form.create_window();
		f_list = form.create_list("Menu", repeat_boundary_items : true);
		form.set_event_callback(f_list, on_control_event_callback(on_form_list_event));
		f_ok = form.create_button("OK", true);
		form.set_state(f_ok, true, false);
		f_cancel = form.create_button("Cancel", false, true);
		form.set_state(f_cancel, true, false);
		form.focus_silently(f_list);
		if (reset_settings) {
			intro_text = click_sound = enter_sound = edge_sound = wrap_sound = open_sound = close_sound = "";
	music_added=false;
			wrap = false;
			automatic_intro = true;
			wrap_delay = 10;
			focus_first_item = false;
	music.close();
			@pack_file = null;
		}
	}

void set_volume_keys(int key1, int key2)
{
volkeyup = key1;
volkeydown = key2;
}
void fade_music(int value1=20)
{
fade(music, -50, value1);
music.stop();
}
void stop_music()
{
music.stop();
}
void play_music()
{
music.set_volume(menumusvolume);
if (music.playing == false)
music.play_looped();
}
void add_music(string musicpath) {
if (music.playing == false) {
if(!music.load(musicpath))
music.set_volume(menumusvolume);
music_added = true;
}
}

	// Item IDs are entirely optional.
	int add_item(const string&in text, const string&in id = "", int position = -1) {
		if (!form.add_list_item(f_list, text, id, position, false, focus_first_item)) return -1;
		if (position == -1) position = form.get_list_count(f_list) -1;
		return position;
	}
	void add_items(string[]@ item_list) {
		for (uint i = 0; i < item_list.length(); i++) add_item(item_list[i]);
	}
	// Call this function to produce the intro sequence for the menu. You don't need to call it at all, if you like.
	void intro() {
		if (intro_text.empty()) {
			form.focus(f_list);
			return;
		}
		play(open_sound);
		speak(intro_text.format(form.get_list_count(0)));
		if (focus_first_item) form.set_list_position(0, 0, true);
		else {
			string text = form.get_list_item(0, form.get_list_position(0));
			if (!text.empty()) speak(text, false);
		}
	}
	// The following function returns true if the menu should keep running or false if it has been exited or if an option has been selected.
	bool monitor() {
music.set_volume(menumusvolume);
music.play_looped();
		last_selected_index = -1;
		last_selected_id = "";
		if (@background_callback != null) background_callback(this, background_callback_data);
		if (automatic_intro) {
			intro();
			automatic_intro = false;
		}
if (key_down(volkeydown) and voltimer.elapsed >= voltime and menumusvolume > -50) {
menumusvolume -= 2;
music.set_volume(menumusvolume);
//writepreffs();
voltimer.restart();
}
if (key_down(volkeyup) and voltimer.elapsed >= voltime and menumusvolume < 0) {
menumusvolume += 2;
music.set_volume(menumusvolume);
//writepreffs();
voltimer.restart();
}
if(key_repeating(KEY_TAB) and intro_text.length()>0)
{
speak(intro_text);
}
		form.monitor();
		if (form.is_pressed(f_cancel)) {
			play(close_sound);
			return false;
		}
		else if (!form.is_pressed(f_ok)) return true;
		last_selected_index = form.get_list_position(f_list);
		if (last_selected_index < 0) return true;
		last_selected_id = form.get_list_item_id(f_list, last_selected_index);
		play(enter_sound);
		return false;
	}
	// A blocking style of running the menu which acts very much like dynamic_menu. This blocks until the user selects an option or exits the menu, then returns the selected_item property.
	int run() {
		while (monitor()) wait(5);
		return last_selected_index;
	}
	// Various getters and setters.
	int get_focused_item() property {
		return form.get_list_position(f_list);
	}
	void set_focused_item(int index) property {
		form.set_list_position(f_list, index);
	}
	bool set_focused_item(int index, bool speak_change) {
		return form.set_list_position(f_list, index, speak_change);
	}
	string get_item_id(int index) {
		return form.get_list_item_id(f_list, index);
	}
	// Use the following method sparingly as we must loop through all items to determine an index from an ID.
	int get_item_index(const string&in id) {
		return form.get_list_index_by_id(f_list, id);
	}
	int get_item_count() property {
		return form.get_list_count(f_list);
	}
	int get_selected_item() const property {
		return last_selected_index;
	}
	string get_selected_item_id() const property {
		return last_selected_id;
	}
	// Anything beyond this point is only used internally by this class.
	private int f_list, f_ok, f_cancel; // form controls
	private int last_selected_index;
	private string last_selected_id;
	// Simple sound management
	private sound@[] playing_sounds;
	bool play(const string&in soundpath) {
		if (soundpath.empty()) return false;
		sound s;
		if (!s.load(soundpath, @pack_file != null? @pack_file : @sound_default_pack)) return false;
		bool r = s.play();
		// Clean sounds that have finished playing.
		for (uint i = 0; i < playing_sounds.length(); i++) {
			if (playing_sounds[i].playing) continue;
			playing_sounds.remove_at(i);
			i--;
		}
		playing_sounds.insert_last(s);
		return r;
	}
	private int on_form_list_event(audio_form@ f, int c, control_event_type event, dictionary@ args) {
		if (event != event_list_cursor) return 0;
		if (args.exists("boundary")) {
			if (!wrap) {
				play(edge_sound);
				return 0;
			}
			play(wrap_sound);
			stop_speech();
			wait(wrap_delay);
			f.set_list_position(0, int(args["key"]) == KEY_DOWN? 0 : f.get_list_count(0) -1, true);
			return 1;
		}
		play(click_sound);
		return 0;
	}
}

// helper menus:
// learn_game_sounds: takes a dictionary of sound descriptions mapped to sound filenames or lists of sound filenames and displays a menu which allows users to press enter on sound descriptions to hear associated sounds.
void learn_game_sounds_menu(dictionary@ sfx, const string&in audio_prefix = "", menu@ m = null) {
	sound audio;
	if (@m == null) m = menu();
	if (m.intro_text.empty()) m.intro_text = "Select a sound with the up and down arrow keys and press enter to preview it.";
	string enter_sound = m.enter_sound;
	m.enter_sound = "";
	string[]@ sfx_names = sfx.get_keys();
	sfx_names.sort_ascending();
	m.reset();
	m.focus_first_item = false;
	m.wrap = true;
	m.click_sound="menuclick.ogg";
	m.close_sound="menuenter.ogg";
	m.edge_sound="menuedge.ogg";
	m.open_sound="menuopen.ogg";
	m.wrap_sound="menuclick.ogg";
	m.add_items(sfx_names);
	m.add_item("Go back");
	m.intro();
	while (true) {
		wait(5);
		int old_pos = m.focused_item;
		bool r = m.monitor();
		if (m.focused_item != old_pos) {
			audio.close();
			old_pos = m.focused_item;
		}
		if (r) continue;
		if (m.selected_item < 0) return;
		if (m.selected_item >= sfx.size()) {
			m.play(enter_sound);
			return;
		}
		string filename = "";
		if (!sfx.get(sfx_names[m.selected_item], filename)) {
			string[]@ filenames = cast<string[]@>(sfx[sfx_names[m.selected_item]]);
			if (filenames.length() > 0) filename = filenames[random(0, filenames.length() -1)];
		}
		if (!filename.empty()) {
			audio.load(audio_prefix + filename);
			audio.play();
		}
		else speak("Unable to play "+sfx_names[m.selected_item]);
	}
}
// yes_no: A simple yes no menu that returns true if the user clicked yes, false if they clicked no or pressed escape. The prompt is inserted as the first item in the menu so that users can repeat it.
bool yes_no(const string&in prompt, menu@ m = null) {
	if (@m == null) @m = menu();
	m.reset();
	m.focus_first_item = true;
	m.wrap = true;
	m.click_sound="sounds/menuclick.ogg";
	m.close_sound="sounds/menuclose.ogg";
	m.edge_sound="sounds/menuedge.ogg";
	m.enter_sound="sounds/menuenter.ogg";
	m.open_sound="sounds/menuopen.ogg";
	m.wrap_sound="sounds/menuwrap.ogg";
	m.add_item(prompt);
	m.add_item("yes");
	m.add_item("no");
	speak(prompt);
	m.automatic_intro = false;
	while (m.selected_item < 1) {
		wait(5);
		if (m.monitor()) continue;
		if (m.selected_item == 0) speak(prompt);
		else break;
	}
	return m.selected_item == 1;
}
