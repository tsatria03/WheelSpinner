void add_wheel()
{
    string name = vd.input_box(trl("New Wheel"), trl("Enter a name for your new wheel"));
    if (name == "" || wheels.exists(name))
    {
        alert(trl("Error"), trl("Invalid or duplicate name."));
        wheelspin();
    }
    string desc = vd.input_box(trl("Description"), trl("Enter a description for this wheel."));
    string options = vd.input_box(trl("Choices"), trl("Separate your choices with commas."));
    wheels[name] = options;
    if (desc != "") wheelDescriptions[name] = desc;
    alert(trl("Saved"), trl("Wheel added!"));
    writedata();
    wheelspin();
}
void edit_wheel()
{
    array<string>@ keys = wheels.get_keys();
    keys.sort_ascending();
    if (keys.length() == 0)
    {
        alert(trl("Error"), trl("No wheels available to edit."));
        wheelspin();
    }
    setupmenu(false);
    for (uint i = 0; i < keys.length(); i++)
    {
        string key = keys[i];
        array<string>@ opts = string_split(string(wheels[key]), ", ");
        bool locked = lockedWheels.exists(key);
int spins = spinCounts.exists(key) ? int(spinCounts[key]) : 0;
        string status = locked ? trl("Locked") : trl("Unlocked");
        m.add_item(key + " (" + opts.length() + " " + trl("choices.") + " " + status + ", " + spins + " " + trl("spins") + ")", key);
    }
    bool allLocked = true;
    for (uint i = 0; i < keys.length(); i++)
    {
        if (!lockedWheels.exists(keys[i]))
        {
            allLocked = false;
            break;
        }
    }
if (!allLocked)
{
        m.add_item(trl("Delete all wheels"), "deleteall");
        m.add_item(trl("Delete selected wheels"), "deleteselected");
}
bool anyUnlocked = false;
for (uint i = 0; i < keys.length(); i++)
{
    if (!lockedWheels.exists(keys[i]))
    {
        anyUnlocked = true;
        break;
    }
}
if (anyUnlocked)
{
        m.add_item(trl("Delete all unlocked wheels"), "deleteunlocked");
}
    string toggleLabel = allLocked ? trl("Unlock all wheels") : trl("Lock all wheels");
    m.add_item(toggleLabel, "togglelockall");
    m.add_item(trl("Back"), "Back");
    m.intro_text=trl("Select a wheel to edit. You have ") + keys.length() + trl(" wheels.");
    int res = m.run();
    if (res == -1 || m.get_item_id(m.get_selected_item()) == "Back")
    {
        wheelspin();
    }
    string selected = m.get_item_id(m.get_selected_item());
if (selected == "deleteall")
{
    setupmenu(false);
        m.add_item(trl("yes"), "confirm");
        m.add_item(trl("no"), "cancel");
        m.intro_text = trl("Are you sure you want to delete all wheels? This cannot be undone.");
    int confirm = m.run();
    if (m.get_item_id(m.get_selected_item()) == "confirm")
    {
        wheels.clear();
        lockedWheels.clear();
        writedata();
            alert(trl("Deleted"), trl("All wheels have been deleted."));
    }
    wheelspin();
}
else if (selected == "deleteselected")
{
    form.reset();
        form.create_window(trl("Delete Selected Wheels"), false);
    array<string>@ unlocked = wheels.get_keys();
    unlocked.sort_ascending();
        int checklist = form.create_list(trl("Select wheels to delete:"), unlocked.length(), true);
    for (uint i = 0; i < unlocked.length(); i++)
    {
        string name = unlocked[i];
        if (!lockedWheels.exists(name))
        {
            form.add_list_item(checklist, name, name);
        }
    }
        int confirm = form.create_button(trl("&Delete"), true);
        int cancel = form.create_button(trl("&Cancel"));
    form.focus(checklist);
    while (true)
    {
        wait(5);
        form.monitor();
        if (form.is_pressed(confirm))
        {
            int[]@ checked = form.get_checked_list_items(checklist);
            if (checked.length() == 0)
            {
                    alert(trl("None Selected"), trl("You must select at least one wheel."));
                wheelspin();
            }
            for (uint i = 0; i < checked.length(); i++)
            {
                string name = form.get_list_item_id(checklist, checked[i]);
                wheels.erase(name);
                if (lockedWheels.exists(name)) lockedWheels.erase(name);
                if (spinCounts.exists(name)) spinCounts.erase(name);
                if (wheelDescriptions.exists(name)) wheelDescriptions.erase(name);
            }
            writedata();
                alert(trl("Deleted"), trl("Selected wheels have been deleted."));
            wheelspin();
        }
        if (form.is_pressed(cancel) || key_pressed(KEY_ESCAPE))
        {
            wheelspin();
        }
    }
}
else if (selected == "deleteunlocked")
{
    setupmenu(false);
        m.add_item(trl("yes"), "confirm");
        m.add_item(trl("no"), "cancel");
        m.intro_text=trl("Are you sure you want to delete all unlocked wheels? Locked wheels will not be affected.");
    int confirm = m.run();
    if (m.get_item_id(m.get_selected_item()) == "confirm")
    {
        array<string>@ toDelete = wheels.get_keys();
        for (uint i = 0; i < toDelete.length(); i++)
        {
            string name = toDelete[i];
            if (!lockedWheels.exists(name))
            {
                wheels.erase(name);
            }
        }
        writedata();
            alert(trl("Deleted"), trl("All unlocked wheels have been deleted."));
    }
    wheelspin();
}
    else if (selected == "togglelockall")
    {
        setupmenu(false);
        if (allLocked)
        {
            m.add_item(trl("yes"), "confirm");
            m.add_item(trl("no"), "cancel");
            m.intro_text=trl("Are you sure you want to unlock all wheels?");
        }
        else
        {
            m.add_item(trl("yes"), "confirm");
            m.add_item(trl("no"), "cancel");
            m.intro_text=trl("Are you sure you want to lock all wheels?");
        }
        int confirm = m.run();
        if (m.get_item_id(m.get_selected_item()) == "confirm")
        {
            if (allLocked)
            {
                lockedWheels.clear();
                alert(trl("All wheels unlocked"), trl("All wheels have been unlocked. They can now be edited or deleted."));
            }
            else
            {
                for (uint i = 0; i < keys.length(); i++)
                {
                    lockedWheels[keys[i]] = true;
                }
                alert(trl("All wheels locked"), trl("All wheels have been locked. They can no longer be edited or deleted."));
            }
            writedata();
        }
        wheelspin();
    }
    setupmenu(false);
    bool isLocked = lockedWheels.exists(selected);
    if (!isLocked)
    {
        m.add_item(trl("Change description"), "eddesc");
        m.add_item(trl("Show description"), "viewdesc");
        m.add_item(trl("Edit choices"), "edit");
        m.add_item(trl("Delete wheel"), "delete");
        m.add_item(trl("Rename wheel"), "rename");
    }
    if (isLocked) m.add_item(trl("Show description"), "viewdesc");
    m.add_item(isLocked ? trl("Unlock wheel") : trl("Lock wheel"), "togglelock");
    m.add_item(trl("Back"), "back");
    m.intro_text=trl("What would you like to do with the wheel '") + selected + "'?";
    int actionRes = m.run();
    string action = m.get_item_id(m.get_selected_item());
    if (action == "edit")
    {
        string current = string(wheels[selected]);
        string edited = vd.input_box(trl("Edit"), trl("Edit your choices:"), current);
        if (edited == "" && current != "")
        {
            alert(trl("Cancelled"), trl("No changes were made."));
        }
        else
        {
            wheels[selected] = edited;
            alert(trl("Saved"), trl("Changes saved."));
            writedata();
        }
        wheelspin();
    }
else if (action == "eddesc")
{
    string current = wheelDescriptions.exists(selected) ? string(wheelDescriptions[selected]) : "";
        string edited = vd.input_box(trl("Change Description"), trl("Enter a new description for this wheel:"), current);
    if (edited == "" && current != "")
    {
            alert(trl("Cancelled"), trl("No changes were made."));
    }
    else if (edited != current)
    {
        if (edited == "")
        {
            wheelDescriptions.erase(selected);
        }
        else
        {
            wheelDescriptions[selected] = edited;
        }
            alert(trl("Saved"), trl("Description updated."));
        writedata();
    }
    wheelspin();
}
else if (action == "viewdesc")
{
    string desc = wheelDescriptions.exists(selected) ? string(wheelDescriptions[selected]) : "";
    if (desc == "")
    {
            alert(trl("No Description"), trl("This wheel doesn't have a description yet."));
    }
    else
    {
            dlg(trl("Description for '") + selected + "':\n\n" + desc);
    }
    wheelspin();
}
    else if (action == "rename")
    {
        string newName = vd.input_box(trl("Rename"), trl("Enter a new name for this wheel:"), selected);
        if (newName != "" && !wheels.exists(newName))
        {
            wheels[newName] = wheels[selected];
            wheels.erase(selected);
            alert(trl("Renamed"), trl("Wheel has been renamed."));
            writedata();
        }
        else
        {
            alert(trl("Error"), trl("Invalid or duplicate name."));
        }
        wheelspin();
    }
    else if (action == "delete")
    {
        setupmenu(false);
        m.add_item(trl("yes"), "delete");
        m.add_item(trl("no"), "cancel");
        m.intro_text=trl("Are you sure you want to delete the wheel '") + selected + "'?";
        int confirm = m.run();
        if (m.get_item_id(m.get_selected_item()) == "delete")
        {
            wheels.erase(selected);
            alert(trl("Deleted"), trl("Wheel has been deleted."));
            writedata();
        }
        wheelspin();
    }
    else if (action == "togglelock")
    {
        string promptText = isLocked ? trl("Are you sure you want to unlock the wheel '") + selected + "'?" : trl("Are you sure you want to lock the wheel '") + selected + "'?";
        setupmenu(false);
        m.add_item(trl("yes"), "confirm");
        m.add_item(trl("no"), "cancel");
        m.intro_text = promptText;
        int confirm = m.run();
        if (m.get_item_id(m.get_selected_item()) == "confirm")
        {
            if (isLocked)
            {
                lockedWheels.erase(selected);
                alert(trl("Unlocked"), trl("Wheel '") + selected + trl("' has been unlocked. It can now be edited or deleted."));
            }
            else
            {
                lockedWheels[selected] = true;
                alert(trl("Locked"), trl("Wheel '") + selected + trl("' has been locked. It can no longer be edited or deleted."));
            }
            writedata();
        }
        wheelspin();
    }
}
void manage_wheels()
{
    setupmenu(false);
    m.add_item(trl("Export all wheels to file"), "export");
m.add_item(trl("Export selected wheels to file"), "export_selected");
    m.add_item(trl("Import all wheels from file"), "import");
m.add_item(trl("Import selected wheels from file"), "import_selected");
    m.add_item(trl("Back"), "back");
    m.intro_text=trl("Wheel Management Menu");
    int res = m.run();
    string selected = m.get_item_id(m.get_selected_item());
    if (selected == "export")
    {
        setupmenu(false);
        m.add_item(trl("yes"), "confirm");
        m.add_item(trl("no"), "cancel");
        m.intro_text=trl("Are you sure you want to export all wheels to a file?");
        int confirm = m.run();
        if (m.get_item_id(m.get_selected_item()) == "confirm")
        {
            export_wheels();
        }
manage_wheels();
    }
else if (selected == "export_selected")
{
    export_selected_wheels();
}
    else if (selected == "import")
    {
        setupmenu(false);
        m.add_item(trl("yes"), "confirm");
        m.add_item(trl("no"), "cancel");
        m.intro_text=trl("Are you sure you want to import all wheels from a file?");
        int confirm = m.run();
        if (m.get_item_id(m.get_selected_item()) == "confirm")
        {
            import_wheels();
        }
manage_wheels();
    }
else if (selected == "import_selected")
{
    import_selected_wheels();
}
    else
    {
        wheelspin();
    }
}
void view_stats()
{
    array<string>@ keys = wheels.get_keys();
    keys.sort_ascending();
    if (keys.length() == 0)
    {
        alert(trl("No Wheels"), trl("There are no wheels to show statistics for."));
        wheelspin();
    }
    int totalSpins = 0;
    for (uint i = 0; i < keys.length(); i++)
    {
        if (spinCounts.exists(keys[i]))
            totalSpins += int(spinCounts[keys[i]]);
    }
    setupmenu(false);
    for (uint i = 0; i < keys.length(); i++)
    {
        string name = keys[i];
        int spins = spinCounts.exists(name) ? int(spinCounts[name]) : 0;
        array<string>@ options = string_split(string(wheels[name]), ", ", true);
        string mostCommon = " none";
        int mostCount = 0;
        for (uint j = 0; j < options.length(); j++)
        {
            string option = trim(options[j]);
            string key = name + "/" + option;
            int count = spinOptionCounts.exists(key) ? int(spinOptionCounts[key]) : 0;
            if (count > mostCount)
            {
                mostCount = count;
                mostCommon = option;
            }
        }
        string summary = name + ": " + format_int(spins) + trl(" spins") + ", " + trl("most common: ") + mostCommon;
        m.add_item(summary, name);
    }
    m.add_item(trl("Back"), "back");
    m.intro_text = trl("These are your current wheel statistics.") + "\n" + trl("Total spins across all wheels: ") + format_int(totalSpins);
    int res = m.run();
    wheelspin();
}
void show_recent_wheels()
{
    for (int i = int(recentWheels.length()) - 1; i >= 0; i--)
    {
        if (!wheels.exists(recentWheels[i]))
        {
            recentWheels.remove_at(i);
        }
    }
    writedata();
    if (recentWheels.length() == 0)
{
        alert(trl("No Recent Wheels"), trl("You haven't spun any wheels yet."));
        wheelspin();
    }
    setupmenu(false);
    for (uint i = 0; i < recentWheels.length(); i++)
{
        string name = recentWheels[i];
        array<string>@ opts = string_split(string(wheels[name]), ", ");
        int spins = spinCounts.exists(name) ? int(spinCounts[name]) : 0;
        m.add_item(name + " (" + opts.length() + trl(" choices, ") + spins + trl(" spins)"), name);
    }
    m.add_item(trl("Back"), "back");
    m.intro_text=trl("Pick a recently used wheel to spin again.");
    int res = m.run();
    if (res == -1 || m.get_item_id(m.get_selected_item()) == "back") wheelspin();
    string chosen = m.get_item_id(m.get_selected_item());
    spin_selected_wheel(chosen);
}
void spin_same_wheel(string chosen)
{
    array<string>@ allOptions = string_split(string(wheels[chosen]), ",", true);
    array<string> options;
    for (uint i = 0; i < allOptions.length(); i++)
{
        string opt = trim(allOptions[i]);
        string key = chosen + "/" + opt;
        if (!noRepeatSpins || !usedSpinOptions.exists(key))
{
            options.insert_last(opt);
        }
    }
    if (options.length() < 1)
{
        alert(trl("Invalid"), trl("You need at least 1 valid option to spin."));
        wheelspin();
    }
    string spinSoundPath = directory_exists("sounds/wheels/" + chosen) ? "sounds/wheels/" + chosen + "/*spin*" : "sounds/wheels/" + wheeltype + "/*spin*";
    string dingSoundPath = directory_exists("sounds/wheels/" + chosen) ? "sounds/wheels/" + chosen + "/*ding*" : "sounds/wheels/" + wheeltype + "/*ding*";
    int spinTicks = spinBaseTicks + random(0, spinRandomRange);
    speak(trl("Spinning ") + chosen);
    for (uint i = 0; i < spinTicks; i++)
{
    uint idx = random(0, options.length() - 1);
        pool.play_stationary(find_sound(spinSoundPath), false);
        wait(spinBaseDelay + i * spinGrowth);
    }
    string result = trim(options[random(0, options.length() - 1)]);
    pool.play_stationary(find_sound(dingSoundPath), false);
    dlg(trl("The wheel landed on ") + result + ".");
    string countKey = chosen + "/" + result;
    spinCounts[chosen] = (spinCounts.exists(chosen) ? int(spinCounts[chosen]) : 0) + 1;
    spinOptionCounts[countKey] = (spinOptionCounts.exists(countKey) ? int(spinOptionCounts[countKey]) : 0) + 1;
    usedSpinOptions[countKey] = true;
    if (noRepeatSpins && options.length() == 1)
{
        array<string>@ allKeys = usedSpinOptions.get_keys();
        for (uint i = 0; i < allKeys.length(); i++)
{
            if (allKeys[i].starts_with(chosen + "/"))
{
                usedSpinOptions.erase(allKeys[i]);
            }
        }
        alert(trl("Reset"), trl("All options for this wheel have been used. The list will reset on the next spin."));
        writedata();
        wheelspin();
    }
    string msg = trl("You spun the \"%wheel%\" wheel.\nThe wheel landed on %result%.");
    msg = string_replace(msg, "%wheel%", chosen, true);
    msg = string_replace(msg, "%result%", result, true);
    resultsHistory.insert_last(msg);
    if (resultsHistory.length() > 100) resultsHistory.remove_at(0);
    writedata();
    int remaining = 0;
    for (uint i = 0; i < allOptions.length(); i++)
{
        string key = chosen + "/" + trim(allOptions[i]);
        if (!usedSpinOptions.exists(key)) remaining++;
    }
    setupmenu(false);
    m.add_item(trl("yes"), "again");
    m.add_item(trl("no"), "back");
    m.intro_text = noRepeatSpins ? trl("Would you like to spin the wheel again?") + " " + trl("You have ") + format_int(remaining) + trl(" options left for this wheel.") : trl("Would you like to spin the wheel again?");
    int choice = m.run();
    if (m.get_item_id(m.get_selected_item()) == "again")
        spin_same_wheel(chosen);
    else
        wheelspin();
}
void spin_wheel()
{
    setupmenu(false);
    m.add_item(trl("All Wheels"), "all");
    m.add_item(trl("Most Recent Wheels"), "rec");
    m.add_item(trl("Most Spun Wheels"), "top");
    m.add_item(trl("Search for a Wheel"), "search");
    m.add_item(trl("Back"), "back");
    m.intro_text = trl("Choose how you'd like to pick a wheel to spin");
    int res = m.run();
    string pick = m.get_item_id(m.get_selected_item());
    if (pick == "back")
{
        wheelspin();
    }
else if (pick == "rec")
{
        show_recent_wheels();
    }
else if (pick == "all")
{
        spin_from_list(false);
    }
else if (pick == "top")
{
        spin_from_list(true);
    }
else if (pick == "search")
{
        string query = vd.input_box(trl("Search"), trl("Type part of a wheel's name to spin it"));
        if (query == "")
{
            wheelspin();
        }
        array<string>@ keys = wheels.get_keys();
        array<string> matches;
        for (uint i = 0; i < keys.length(); i++)
{
            if (keys[i].lower().find(query.lower()) >= 0)
{
                matches.insert_last(keys[i]);
            }
        }
        if (matches.length() == 0)
{
            alert(trl("No Match"), trl("No wheels found matching ") + query);
            wheelspin();
        }
else if (matches.length() == 1)
{
            spin_selected_wheel(matches[0]);
        }
else
{
            setupmenu(false);
            for (uint i = 0; i < matches.length(); i++)
{
                m.add_item(matches[i], matches[i]);
            }
            m.add_item(trl("Back"), "back");
            m.intro_text = trl("Multiple matches found. Pick one to spin.");
            int res = m.run();
            if (res == -1 || m.get_item_id(m.get_selected_item()) == "back")
                wheelspin();
            else
                spin_selected_wheel(m.get_item_id(m.get_selected_item()));
        }
    }
}
void spin_selected_wheel(string chosen)
{
    update_recent_wheels(chosen);
    spin_same_wheel(chosen);
}
void spin_from_list(bool mostUsed)
{
    array<string>@ keys = wheels.get_keys();
    if (keys.length() == 0)
    {
        alert(trl("Error"), trl("No wheels to spin."));
        wheelspin();
    }
if (mostUsed)
{
    keys.sort(compareSpinCount);
}
    else
    {
        keys.sort_ascending();
    }
    setupmenu(false);
    for (uint i = 0; i < keys.length(); i++)
    {
        string key = keys[i];
        array<string>@ opts = string_split(string(wheels[key]), ", ");
        int spins = spinCounts.exists(key) ? int(spinCounts[key]) : 0;
        m.add_item(key + " (" + opts.length() + trl(" choices. ") + spins + trl(" spins)"), key);
    }
    m.add_item(trl("random"), "random");
    m.add_item(trl("Back"), "back");
   if (mostUsed)
    {
        m.intro_text = trl("These are your most spun wheels. Choose one to spin.");
    }
    else
    {
        string msg = trl("Pick a wheel to spin. You have %count% wheels.");
        msg = string_replace(msg, "%count%", format_int(keys.length()), true);
        m.intro_text = msg;
    }
    int res = m.run();
    if (res == -1 || m.get_item_id(m.get_selected_item()) == "back")
    {
        wheelspin();
    }
    string chosen = m.get_item_id(m.get_selected_item());
    if (chosen == "random")
    {
        chosen = keys[random(0, keys.length() - 1)];
    }
    spin_selected_wheel(chosen);
}
void spinsettings()
{
    form.reset();
    form.create_window(trl("Spin Settings"), false);
    int baseSlider = form.create_slider(trl("Spin base delay."), spinBaseDelay, 1, 100, 1);
    int growthSlider = form.create_slider(trl("Spin growth factor."), spinGrowth, 1, 100, 1);
    int ticksSlider = form.create_slider(trl("Spin tick count."), spinBaseTicks, 1, 100, 1);
    int rangeSlider = form.create_slider(trl("Spin randomness."), spinRandomRange, 1, 100, 1);
int repeatToggle = form.create_checkbox(trl("Enable Removing chosen options from future spins."), noRepeatSpins);
    array<string> languageFiles = list_languages();    
languageFiles.insert_at(0, "None");
    int langList = form.create_list(trl("Wheel Translation Language:"), languageFiles.length());
    for (uint i = 0; i < languageFiles.length(); i++)
    {
        form.add_list_item(langList, languageFiles[i], languageFiles[i]);
    }
int currentLangIndex = 0;
for (uint i = 0; i < languageFiles.length(); i++)
{
    if (languageFiles[i].lower() == currentlangfile.lower())
    {
        currentLangIndex = i;
        break;
    }
}
    form.set_list_position(langList, currentLangIndex);
string[] wheelFolders = find_directories("sounds/wheels/*");
wheelFolders.sort(natural_number_sort);
    int wheellist = form.create_list(trl("Wheel Sound Pack: "), wheelFolders.length());
    array<string> wheelOptions;
    for (uint i = 0; i < wheelFolders.length(); i++)
    {
    string folderName = wheelFolders[i];
    form.add_list_item(wheellist, folderName, folderName);
        wheelOptions.insert_last(folderName);
    }
    int wheelIndex = 0;
    for (uint i = 0; i < wheelOptions.length(); i++)
    {
        if (wheelOptions[i] == wheeltype)
        {
            wheelIndex = i;
            break;
        }
    }
    form.set_list_position(wheellist, wheelIndex);
int exportBtn = form.create_button(trl("Export Settings to File"));
int importBtn = form.create_button(trl("Import Settings from File"));
    int apply = form.create_button(trl("&Save Settings"), true);
    int cancel = form.create_button(trl("&Cancel"));
    form.focus(baseSlider);
    while (true)
    {
        wait(5);
        form.monitor();
        int selectedIndex = form.get_list_position(wheellist);
        if (selectedIndex != -1 && wheelOptions[selectedIndex] != wheeltype)
        {
            wheeltype = wheelOptions[selectedIndex];
pool.play_stationary(find_sound("sounds/wheels/" + wheeltype + "/*spin*"), false);
        }
        spinBaseDelay = form.get_slider(baseSlider);
        spinGrowth = form.get_slider(growthSlider);
        spinBaseTicks = form.get_slider(ticksSlider);
        spinRandomRange = form.get_slider(rangeSlider);
noRepeatSpins = form.is_checked(repeatToggle);
        if (key_pressed(KEY_ESCAPE))
        {
            wheelspin();
        }
if (form.is_pressed(importBtn))
{
    setupmenu(false);
    m.add_item(trl("yes"), "yes");
    m.add_item(trl("no"), "no");
    m.intro_text=trl("Are you sure you want to import your current spin settings from a file?");
    int confirm = m.run();
    if(confirm==-1)
    {
spinsettings();
}
    if (m.get_item_id(m.get_selected_item()) == "yes")
{
        import_wheel_settings();
    }
    if (m.get_item_id(m.get_selected_item()) == "no")
{
spinsettings();
    }
}
if (form.is_pressed(exportBtn))
{
    setupmenu(false);
    m.add_item(trl("yes"), "yes");
    m.add_item(trl("no"), "no");
    m.intro_text=trl("Are you sure you want to export your current spin settings to a file?");
    int confirm = m.run();
    if(confirm==-1)
    {
spinsettings();
}
    if (m.get_item_id(m.get_selected_item()) == "yes")
{
        export_wheel_settings();
    }
    if (m.get_item_id(m.get_selected_item()) == "no")
{
spinsettings();
    }
}
        if (form.is_pressed(apply))
        {
            int selectedLangIndex = form.get_list_position(langList);
            if (selectedLangIndex >= 0 && selectedLangIndex < languageFiles.length())
            {
                currentlangfile = languageFiles[selectedLangIndex];
                load_language(currentlangfile);
                show_window(trl("WheelSpinner, version") + " " + version);
            }
            writepreffs();
            alert(trl("Updated"), trl("Spin settings updated!"));
            wheelspin();
        }
        if (form.is_pressed(cancel))
        {
            wheelspin();
        }
    }
}
