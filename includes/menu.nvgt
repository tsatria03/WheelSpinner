void add_wheel()
{
    string name = vd.input_box("New Wheel", "Enter a name for your new wheel:");
    if (name == "" || wheels.exists(name))
    {
        alert("Error", "Invalid or duplicate name.");
        wheelspin();
    }
    string desc = vd.input_box("Description", "Enter a description for this wheel.");
    string options = vd.input_box("Choices", "Separate your choices with commas.");
    wheels[name] = options;
    if (desc != "") wheelDescriptions[name] = desc;
    alert("Saved", "Wheel added!");
    writedata();
    wheelspin();
}
void edit_wheel()
{
    array<string>@ keys = wheels.get_keys();
    keys.sort_ascending();
    if (keys.length() == 0)
    {
        alert("Error", "No wheels available to edit.");
        wheelspin();
    }
    setupmenu(false);
    for (uint i = 0; i < keys.length(); i++)
    {
        string key = keys[i];
        array<string>@ opts = string_split(string(wheels[key]), ", ");
        bool locked = lockedWheels.exists(key);
int spins = spinCounts.exists(key) ? int(spinCounts[key]) : 0;
        string status = locked ? "Locked" : "Unlocked";
m.add_item(key + " (" + opts.length() + " choices. " + status + ", " + spins + " spins)", key);
    }
    bool allLocked = true;
    for (uint i = 0; i < keys.length(); i++)
    {
        if (!lockedWheels.exists(keys[i]))
        {
            allLocked = false;
            break;
        }
    }
if (!allLocked)
{
    m.add_item("Delete all wheels", "deleteall");
}
bool anyUnlocked = false;
for (uint i = 0; i < keys.length(); i++)
{
    if (!lockedWheels.exists(keys[i]))
    {
        anyUnlocked = true;
        break;
    }
}
if (anyUnlocked)
{
    m.add_item("Delete all unlocked wheels", "deleteunlocked");
}
    string toggleLabel = allLocked ? "Unlock all wheels" : "Lock all wheels";
    m.add_item(toggleLabel, "togglelockall");
    m.add_item("Back", "Back");
    m.intro_text = "Select a wheel to edit. You have " + keys.length() + " wheels.";
    int res = m.run();
    if (res == -1 || m.get_item_id(m.get_selected_item()) == "Back")
    {
        wheelspin();
    }
    string selected = m.get_item_id(m.get_selected_item());
if (selected == "deleteall")
{
    setupmenu(false);
    m.add_item("yes", "confirm");
    m.add_item("no", "cancel");
    m.intro_text = "Are you sure you want to delete all wheels? This cannot be undone.";
    int confirm = m.run();
    if (m.get_item_id(m.get_selected_item()) == "confirm")
    {
        wheels.clear();
        lockedWheels.clear();
        writedata();
        alert("Deleted", "All wheels have been deleted.");
    }
    wheelspin();
}
else if (selected == "deleteunlocked")
{
    setupmenu(false);
    m.add_item("yes", "confirm");
    m.add_item("no", "cancel");
    m.intro_text = "Are you sure you want to delete all unlocked wheels? Locked wheels will not be affected.";
    int confirm = m.run();
    if (m.get_item_id(m.get_selected_item()) == "confirm")
    {
        array<string>@ toDelete = wheels.get_keys();
        for (uint i = 0; i < toDelete.length(); i++)
        {
            string name = toDelete[i];
            if (!lockedWheels.exists(name))
            {
                wheels.erase(name);
            }
        }
        writedata();
        alert("Deleted", "All unlocked wheels have been deleted.");
    }
    wheelspin();
}
    else if (selected == "togglelockall")
    {
        setupmenu(false);
        if (allLocked)
        {
            m.add_item("yes", "confirm");
            m.add_item("no", "cancel");
            m.intro_text = "Are you sure you want to unlock all wheels?";
        }
        else
        {
            m.add_item("yes", "confirm");
            m.add_item("no", "cancel");
            m.intro_text = "Are you sure you want to lock all wheels?";
        }
        int confirm = m.run();
        if (m.get_item_id(m.get_selected_item()) == "confirm")
        {
            if (allLocked)
            {
                lockedWheels.clear();
                alert("All wheels unlocked", "All wheels have been unlocked. They can now be edited or deleted.");
            }
            else
            {
                for (uint i = 0; i < keys.length(); i++)
                {
                    lockedWheels[keys[i]] = true;
                }
                alert("All wheels locked", "All wheels have been locked. They can no longer be edited or deleted.");
            }
            writedata();
        }
        wheelspin();
    }
    setupmenu(false);
    bool isLocked = lockedWheels.exists(selected);
    if (!isLocked)
    {
m.add_item("Change description", "eddesc");
m.add_item("Show description", "viewdesc");
        m.add_item("Edit choices", "edit");
        m.add_item("Delete wheel", "delete");
        m.add_item("Rename wheel", "rename");
    }
if(isLocked==true) m.add_item("Show description", "viewdesc");
    m.add_item(isLocked ? "Unlock wheel" : "Lock wheel", "togglelock");
    m.add_item("Back", "back");
    m.intro_text = "What would you like to do with the wheel '" + selected + "'?";
    int actionRes = m.run();
    string action = m.get_item_id(m.get_selected_item());
    if (action == "edit")
    {
        string current = string(wheels[selected]);
        string edited = vd.input_box("Edit", "Edit your choices:", current);
        if (edited == "" && current != "")
        {
            alert("Cancelled", "No changes were made.");
        }
        else
        {
            wheels[selected] = edited;
            alert("Saved", "Changes saved.");
            writedata();
        }
        wheelspin();
    }
else if (action == "eddesc")
{
    string current = wheelDescriptions.exists(selected) ? string(wheelDescriptions[selected]) : "";
    string edited = vd.input_box("Change Description", "Enter a new description for this wheel:", current);
    if (edited == "" && current != "")
    {
        alert("Cancelled", "No changes were made.");
    }
    else if (edited != current)
    {
        if (edited == "")
        {
            wheelDescriptions.erase(selected);
        }
        else
        {
            wheelDescriptions[selected] = edited;
        }
        alert("Saved", "Description updated.");
        writedata();
    }
    wheelspin();
}
else if (action == "viewdesc")
{
    string desc = wheelDescriptions.exists(selected) ? string(wheelDescriptions[selected]) : "";
    if (desc == "")
    {
        alert("No Description", "This wheel doesn't have a description yet.");
    }
    else
    {
        dlg("Description for '" + selected + "':\n\n" + desc);
    }
    wheelspin();
}
    else if (action == "rename")
    {
        string newName = vd.input_box("Rename", "Enter a new name for this wheel:", selected);
        if (newName != "" && !wheels.exists(newName))
        {
            wheels[newName] = wheels[selected];
            wheels.erase(selected);
            alert("Renamed", "Wheel has been renamed.");
            writedata();
        }
        else
        {
            alert("Error", "Invalid or duplicate name.");
        }
        wheelspin();
    }
    else if (action == "delete")
    {
        setupmenu(false);
        m.add_item("yes", "delete");
        m.add_item("no", "cancel");
        m.intro_text = "Are you sure you want to delete the wheel '" + selected + "'?";
        int confirm = m.run();
        if (m.get_item_id(m.get_selected_item()) == "delete")
        {
            wheels.erase(selected);
            alert("Deleted", "Wheel has been deleted.");
            writedata();
        }
        wheelspin();
    }
    else if (action == "togglelock")
    {
        string promptText = isLocked ? "Are you sure you want to unlock the wheel '" + selected + "'?" : "Are you sure you want to lock the wheel '" + selected + "'?";
        setupmenu(false);
        m.add_item("yes", "confirm");
        m.add_item("no", "cancel");
        m.intro_text = promptText;
        int confirm = m.run();
        if (m.get_item_id(m.get_selected_item()) == "confirm")
        {
            if (isLocked)
            {
                lockedWheels.erase(selected);
                alert("Unlocked", "Wheel '" + selected + "' has been unlocked. It can now be edited or deleted.");
            }
            else
            {
                lockedWheels[selected] = true;
                alert("Locked", "Wheel '" + selected + "' has been locked. It can no longer be edited or deleted.");
            }
            writedata();
        }
        wheelspin();
    }
}
void manage_wheels()
{
    setupmenu(false);
    m.add_item("Export all wheels to file", "export");
m.add_item("Export selected wheels to file", "export_selected");
    m.add_item("Import all wheels from file", "import");
m.add_item("Import selected wheels from file", "import_selected");
    m.add_item("Back", "back");
    m.intro_text = "Wheel Management Menu";
    int res = m.run();
    string selected = m.get_item_id(m.get_selected_item());
    if (selected == "export")
    {
        setupmenu(false);
        m.add_item("yes", "confirm");
        m.add_item("no", "cancel");
        m.intro_text = "Are you sure you want to export all wheels to a file?";
        int confirm = m.run();
        if (m.get_item_id(m.get_selected_item()) == "confirm")
        {
            export_wheels();
        }
manage_wheels();
    }
else if (selected == "export_selected")
{
    export_selected_wheels();
}
    else if (selected == "import")
    {
        setupmenu(false);
        m.add_item("yes", "confirm");
        m.add_item("no", "cancel");
        m.intro_text = "Are you sure you want to import all wheels from a file?";
        int confirm = m.run();
        if (m.get_item_id(m.get_selected_item()) == "confirm")
        {
            import_wheels();
        }
manage_wheels();
    }
else if (selected == "import_selected")
{
    import_selected_wheels();
}
    else
    {
        wheelspin();
    }
}
void show_recent_wheels()
{
    if (recentWheels.length() == 0)
{
        alert("No Recent Wheels", "You haven't spun any wheels yet.");
        wheelspin();
    }
    setupmenu(false);
    for (uint i = 0; i < recentWheels.length(); i++)
{
        string name = recentWheels[i];
        array<string>@ opts = string_split(string(wheels[name]), ", ");
        int spins = spinCounts.exists(name) ? int(spinCounts[name]) : 0;
        m.add_item(name + " (" + opts.length() + " choices, " + spins + " spins)", name);
    }
    m.add_item("Back", "back");
    m.intro_text = "Pick a recently used wheel to spin again.";
    int res = m.run();
    if (res == -1 || m.get_item_id(m.get_selected_item()) == "back") wheelspin();
    string chosen = m.get_item_id(m.get_selected_item());
    spin_selected_wheel(chosen);
}
void spin_wheel()
{
    setupmenu(false);
    m.add_item("All Wheels", "all");
m.add_item("Most Recent Wheels", "rec");
    m.add_item("Most Spun Wheels", "top");
    m.add_item("Search for a Wheel", "search");
    m.add_item("Back", "back");
    m.intro_text = "Choose how you'd like to pick a wheel to spin:";
    int res = m.run();
    string pick = m.get_item_id(m.get_selected_item());
    if (pick == "back")
{
wheelspin();
}
else if (pick == "rec")
{
 show_recent_wheels();
    }
else if (pick == "all")
{
spin_from_list(false);
}
    else if (pick == "top")
{
spin_from_list(true);
}
else if (pick == "search")
{
    string query = vd.input_box("Search", "Type part of a wheel's name to spin it:");
    if (query != "")
    {
        array<string>@ keys = wheels.get_keys();
        array<string> matches;
        for (uint i = 0; i < keys.length(); i++)
        {
            if (keys[i].lower().find(query.lower()) >= 0)
            {
                matches.insert_last(keys[i]);
            }
        }
        if (matches.length() == 0)
        {
            alert("No Match", "No wheels found matching: " + query);
wheelspin();
        }
        else if (matches.length() == 1)
        {
            spin_selected_wheel(matches[0]);
        }
        else
        {
            setupmenu(false);
            for (uint i = 0; i < matches.length(); i++)
            {
                m.add_item(matches[i], matches[i]);
            }
            m.add_item("Back", "back");
            m.intro_text = "Multiple matches found. Pick one to spin:";
            int res = m.run();
            if (res == -1 || m.get_item_id(m.get_selected_item()) == "back")
            {
wheelspin();
            }
            else
            {
                spin_selected_wheel(m.get_item_id(m.get_selected_item()));
            }
        }
    }
    else
    {
        wheelspin();
    }
}
}
void spin_same_wheel(string chosen)
{
    array<string>@ options = string_split(string(wheels[chosen]), ", ");
    if (options.length() < 2)
    {
        alert("Invalid", "Need at least 2 options to spin.");
        wheelspin();
    }
    int spinTicks = spinBaseTicks + random(0, spinRandomRange);
speak("Spinning " + chosen);
    for (uint i = 0; i < spinTicks; i++)
    {
        uint idx = random(0, options.length() - 1);
        pool.play_stationary(wheeltype + "spin.ogg", false);
        wait(spinBaseDelay + i * spinGrowth);
    }
    string result = trim(options[random(0, options.length() - 1)]);
pool.play_stationary("wheelding"+random(1,3)+".ogg",false);
    dlg("The wheel landed on " + result + ".");
spinCounts[chosen] = (spinCounts.exists(chosen) ? int(spinCounts[chosen]) : 0) + 1;
writedata();
    setupmenu(false);
    m.add_item("yes", "again");
    m.add_item("no", "back");
    m.intro_text = "Would you like to spin the wheel again?";
    int choice = m.run();
    if (m.get_item_id(m.get_selected_item()) == "again")
    {
        spin_same_wheel(chosen);
    }
    else
    {
        wheelspin();
    }
}
void spin_from_list(bool mostUsed)
{
    array<string>@ keys = wheels.get_keys();
    if (keys.length() == 0)
    {
        alert("Error", "No wheels to spin.");
        wheelspin();
    }
if (mostUsed)
{
    keys.sort(compareBySpinCount);
}
    else
    {
        keys.sort_ascending();
    }
    setupmenu(false);
    for (uint i = 0; i < keys.length(); i++)
    {
        string key = keys[i];
        array<string>@ opts = string_split(string(wheels[key]), ", ");
        int spins = spinCounts.exists(key) ? int(spinCounts[key]) : 0;
        m.add_item(key + " (" + opts.length() + " choices. " + spins + " spins)", key);
    }
    m.add_item("random", "random");
    m.add_item("Back", "back");
    m.intro_text = mostUsed ? "These are your most spun wheels. Choose one to spin:" : "Pick a wheel to spin. You have " + keys.length() + " wheels.";
    int res = m.run();
    if (res == -1 || m.get_item_id(m.get_selected_item()) == "back")
    {
        wheelspin();
    }
    string chosen = m.get_item_id(m.get_selected_item());
    if (chosen == "random")
    {
        chosen = keys[random(0, keys.length() - 1)];
    }
    spin_selected_wheel(chosen);
}
void spin_selected_wheel(string chosen)
{
    array<string>@ options = string_split(string(wheels[chosen]), ", ");
    if (options.length() < 2)
    {
        alert("Invalid", "Need at least 2 options to spin.");
        wheelspin();
    }
    int spinTicks = spinBaseTicks + random(0, spinRandomRange);
    speak("Spinning " + chosen);
    for (uint i = 0; i < spinTicks; i++)
    {
        uint idx = random(0, options.length() - 1);
        pool.play_stationary(wheeltype + "spin.ogg", false);
        wait(spinBaseDelay + i * spinGrowth);
    }
    string result = trim(options[random(0, options.length() - 1)]);
    pool.play_stationary("wheelding" + random(1, 3) + ".ogg", false);
    dlg("The wheel landed on " + result + ".");
    spinCounts[chosen] = (spinCounts.exists(chosen) ? int(spinCounts[chosen]) : 0) + 1;
    update_recent_wheels(chosen);
    writedata();
    setupmenu(false);
    m.add_item("yes", "again");
    m.add_item("no", "back");
    m.intro_text = "Would you like to spin the wheel again?";
    int choice = m.run();
    if (m.get_item_id(m.get_selected_item()) == "again")
    {
        spin_same_wheel(chosen);
    }
    else
    {
        wheelspin();
    }
}
void spinsettings()
{
    form.reset();
    form.create_window("Spin Settings", false);
    int baseSlider = form.create_slider("Spin base delay.", spinBaseDelay, 1, 100, 1);
    int growthSlider = form.create_slider("Spin growth factor.", spinGrowth, 1, 100, 1);
    int ticksSlider = form.create_slider("Spin tick count.", spinBaseTicks, 1, 100, 1);
    int rangeSlider = form.create_slider("Spin randomness.", spinRandomRange, 1, 100, 1);
    int wheellist = form.create_list("Wheel sound:", 10);
    array<string> wheelOptions;
    for (uint i = 1; i <= 10; i++)
    {
        string wheelName = "wheel " + i;
        string wheelID = "wheel" + i;
        wheelOptions.insert_last(wheelID);
        form.add_list_item(wheellist, wheelName, wheelID);
    }
    int wheelIndex = 0;
    for (uint i = 0; i < wheelOptions.length(); i++)
    {
        if (wheelOptions[i] == wheeltype)
        {
            wheelIndex = i;
            break;
        }
    }
    form.set_list_position(wheellist, wheelIndex);
int exportBtn = form.create_button("Export Settings to File");
int importBtn = form.create_button("Import Settings from File");
    int apply = form.create_button("&Apply");
    int cancel = form.create_button("&Cancel");
    form.focus(baseSlider);
    while (true)
    {
        wait(5);
        form.monitor();
        int selectedIndex = form.get_list_position(wheellist);
        if (selectedIndex != -1 && wheelOptions[selectedIndex] != wheeltype)
        {
            wheeltype = wheelOptions[selectedIndex];
            pool.play_stationary(wheeltype + "spin.ogg", false);
        }
        spinBaseDelay = form.get_slider(baseSlider);
        spinGrowth = form.get_slider(growthSlider);
        spinBaseTicks = form.get_slider(ticksSlider);
        spinRandomRange = form.get_slider(rangeSlider);
        if (key_pressed(KEY_ESCAPE))
        {
            wheelspin();
        }
if (form.is_pressed(importBtn))
{
    setupmenu(false);
    m.add_item("yes", "yes");
    m.add_item("no", "no");
    m.intro_text = "Are you sure you want to import your current spin settings from a file?";
    int confirm = m.run();
    if(confirm==-1)
    {
spinsettings();
}
    if (m.get_item_id(m.get_selected_item()) == "yes")
{
        import_wheel_settings();
    }
    if (m.get_item_id(m.get_selected_item()) == "no")
{
spinsettings();
    }
}
if (form.is_pressed(exportBtn))
{
    setupmenu(false);
    m.add_item("yes", "yes");
    m.add_item("no", "no");
    m.intro_text = "Are you sure you want to export your current spin settings to a file?";
    int confirm = m.run();
    if(confirm==-1)
    {
spinsettings();
}
    if (m.get_item_id(m.get_selected_item()) == "yes")
{
        export_wheel_settings();
    }
    if (m.get_item_id(m.get_selected_item()) == "no")
{
spinsettings();
    }
}
        if (form.is_pressed(apply))
        {
            alert("Updated", "Spin settings updated!");
            writepreffs();
            wheelspin();
        }
        if (form.is_pressed(cancel))
        {
            wheelspin();
        }
    }
}
