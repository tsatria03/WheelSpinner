/*
This class was made by Mason, with modifications made by me to include the reading and saving of boolion variables. I also changed the wording a bit on some of the functions.
*/

//savedata class.
//by Ultrocity Audio
class savedata
{
//internal variables for the class.
string key;
string fn;
dictionary d;
//the constructor
savedata(string filename, string enckey="")
{
fn=filename;
key=enckey;
}
//the function to load the saved data into the dictionary.
void load()
{
file f;
//fn is our previously declared filename string, so use that.
f.open(fn,"rb");
//check for a decryption key.
if (key=="")
{
//no key, so just deserialize.
d=deserialize(f.read());
}
else
{
//deserialize but first decrypt.
d=deserialize(string_decrypt(f.read(),key));
}
//close the file
f.close();
}
//function to save the data into the file.
void save()
{
file f;
//again, use the FN string
	f.open(fn,"wb");
//check for a key.
if (key=="")
f.write(serialize(d));
else
f.write(string_encrypt(serialize(d),key));
}
//overloaded function of add to add a boolion.
void add(string name, bool value)
{
d.set(name,value);
}
//function to read a boolion.
bool read_bool(string name)
{
bool tmp;
d.get(name,tmp);
return tmp;
}
//function to add a value.
void add(string name, double value)
{
d.set(name,value);
}
//function to read a number.
double read_double(string name)
{
double tmp;
d.get(name,tmp);
return tmp;
}
//function to add a value.
void add(string name, float value)
{
d.set(name,value);
}
//function to read a number.
float read_float(string name)
{
float tmp;
d.get(name,tmp);
return tmp;
}
//function to add a value.
void add(string name, int value)
{
d.set(name,value);
}
//function to read a number.
int read_int(string name)
{
int tmp;
d.get(name,tmp);
return tmp;
}
//overloaded function of add to add a string.
void add(string name, string value)
{
d.set(name,value);
}
//function to read a string
string read_string(string name)
{
string tmp;
d.get(name,tmp);
return tmp;
}
}
