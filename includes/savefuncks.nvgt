void readdata()
{
    sd.load();
    wheels.clear();
    lockedWheels.clear();
    spinCounts.clear();
    wheelDescriptions.clear();
    recentWheels.resize(0);
    resultsHistory.resize(0);
    if (sd.d.exists("wheel_count"))
    {
        int count = sd.read_int("wheel_count");
        for (uint i = 0; i < count; i++)
        {
            string keyName = "wheel_" + i + "_name";
            string valueName = "wheel_" + i + "_options";
            string lockKey = "wheel_" + i + "_locked";
            string spinKey = "wheel_" + i + "_spins";
            string descKey = "wheel_" + i + "_description";
            if (sd.d.exists(keyName) && sd.d.exists(valueName))
            {
                string name = sd.read_string(keyName);
                string options = sd.read_string(valueName);
                wheels[name] = options;
                if (sd.d.exists(lockKey) && sd.read_bool(lockKey))
                    lockedWheels[name] = true;
                if (sd.d.exists(spinKey))
                    spinCounts[name] = sd.read_int(spinKey);
                if (sd.d.exists(descKey))
                    wheelDescriptions[name] = sd.read_string(descKey);
            }
        }
    }
    for (uint i = 0; i < 5; i++)
    {
        string rk = "wheel_recent_" + i;
        if (sd.d.exists(rk))
        {
            string val = sd.read_string(rk);
            if (val != "") recentWheels.insert_last(val);
        }
    }
    for (uint i = 0; i < 100; i++)
    {
        string hk = "spin_history_" + i;
        if (sd.d.exists(hk))
        {
            string entry = sd.read_string(hk);
            if (entry != "") resultsHistory.insert_last(entry);
        }
    }
}
void writedata()
{
    sd.add("wheel_count", wheels.get_keys().length());
    array<string>@ keys = wheels.get_keys();
    for (uint i = 0; i < keys.length(); i++)
    {
        string name = keys[i];
        string key = "wheel_" + i + "_name";
        string value = "wheel_" + i + "_options";
        string lockKey = "wheel_" + i + "_locked";
        string spinKey = "wheel_" + i + "_spins";
        string descKey = "wheel_" + i + "_description";
        sd.add(key, name);
        sd.add(value, string(wheels[name]));
        sd.add(lockKey, lockedWheels.exists(name));
        sd.add(spinKey, spinCounts.exists(name) ? int(spinCounts[name]) : 0);
        sd.add(descKey, wheelDescriptions.exists(name) ? string(wheelDescriptions[name]) : "");
    }
    for (uint i = 0; i < 5; i++)
    {
        string rk = "wheel_recent_" + i;
        if (i < recentWheels.length())
            sd.add(rk, recentWheels[i]);
        else
            sd.add(rk, "");
    }
    for (uint i = 0; i < 100; i++)
    {
        string hk = "spin_history_" + i;
        if (i < resultsHistory.length())
            sd.add(hk, resultsHistory[i]);
        else
            sd.add(hk, "");
    }
    sd.save();
}
void readpreffs()
{
st.load();
if (st.d.exists("spinBaseDelay"))
{
spinBaseDelay = st.read_int("spinBaseDelay");
}
if (st.d.exists("spinGrowth"))
{
spinGrowth = st.read_int("spinGrowth");
}
if (st.d.exists("spinBaseTicks"))
{
spinBaseTicks = st.read_int("spinBaseTicks");
}
if (st.d.exists("spinRandomRange"))
{
spinRandomRange = st.read_int("spinRandomRange");
}
if (st.d.exists("wheeltype"))
{
wheeltype = st.read_string("wheeltype");
}
}
void writepreffs()
{
st.add("spinBaseDelay", spinBaseDelay);
st.add("spinGrowth", spinGrowth);
st.add("spinBaseTicks", spinBaseTicks);
st.add("spinRandomRange", spinRandomRange);
st.add("wheeltype", wheeltype);
st.save();
}
